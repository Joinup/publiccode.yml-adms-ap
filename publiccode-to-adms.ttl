@base <http://example.com/ns#> .
@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rml: <http://semweb.mmlab.be/ns/rml#> .
@prefix ex: <http://example.com/ns#> .
@prefix ql: <http://semweb.mmlab.be/ns/ql#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcat: <http://www.w3.org/ns/dcat#> .
@prefix place: <http://data.europa.eu/placeholder/> .
@prefix dct: <http://purl.org/dc/terms/> .
@prefix adms: <http://www.w3.org/ns/adms#> .

[] a rr:TriplesMap;
  rml:logicalSource [
    rml:source "publiccode.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$.description[*]"
  ];
  rr:subjectMap [
    rml:reference "subject";
  ];
  rr:predicateObjectMap [
    rr:predicate dct:description;
    rr:objectMap [
      rml:reference "longDescription";
      rml:languageMap [
        rml:reference "langcode"
      ]
    ]
  ].

# Mappings for controlled vocabulary translation.
# ADMS status
ex:status-mapping a rr:TriplesMap;
  rml:logicalSource [
    rml:source "../../../mappings/status-mapping.csv" ;
    rml:referenceFormulation ql:CSV
  ];
  rr:subjectMap [
    rml:reference "subject"
  ].

# Language
ex:language-mapping a rr:TriplesMap;
  rml:logicalSource [
    rml:source "../../../mappings/language-mapping.csv" ;
    rml:referenceFormulation ql:CSV
  ];
  rr:subjectMap [ 
    rml:reference "subject"
  ].

# Country
ex:country-mapping a rr:TriplesMap;
  rml:logicalSource [
    rml:source "../../../mappings/country-mapping.csv" ;
    rml:referenceFormulation ql:CSV
  ];
  rr:subjectMap [
    rml:reference "uri"
  ].


[] a rr:TriplesMap;
  rml:logicalSource [
    rml:source "publiccode.json";
    rml:referenceFormulation ql:JSONPath;
    rml:iterator "$"
  ];
  rr:subjectMap [
    rml:reference "subject";
    rr:class dcat:Asset
  ];
  rr:predicateObjectMap [
    rr:predicate dct:title;
    rr:objectMap [
      rml:reference "name"
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dct:publisher;
    rr:objectMap [
      rml:reference "legal.mainCopyrightOwner"
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dcat:keyword;
    rr:objectMap [
      rml:reference "intendedAudience.scope"
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dcat:landingPage;
    rr:objectMap [
      rml:reference "landingURL"
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dcat:theme;
    rr:objectMap [
      rml:reference "categories"
    ]
  ];

  # Joining on two arrays seems broken, so access available languages one by one. Assume max 3 languages.
  # First element
  rr:predicateObjectMap [
    rr:predicate dct:language;
    rr:objectMap [
      rr:parentTriplesMap ex:language-mapping;
      rr:joinCondition [
        rr:child "localisation.availableLanguages[0]";
        rr:parent "langcode";
      ];
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dct:language;
    rr:objectMap [
      rr:parentTriplesMap ex:language-mapping;
      rr:joinCondition [
        rr:child "localisation.availableLanguages[1]";
        rr:parent "langcode";
      ];
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dct:language;
    rr:objectMap [
      rr:parentTriplesMap ex:language-mapping;
      rr:joinCondition [
        rr:child "localisation.availableLanguages[2]";
        rr:parent "langcode";
      ];
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dct:relation;
    rr:objectMap [
      rml:reference "isBasedOn"
    ]
  ];
  # Joining on two arrays seems broken, so access available countrues one by one. Assume max 3 countries.
  rr:predicateObjectMap [
    rr:predicate dct:spatial;
    rr:objectMap [
      rr:parentTriplesMap ex:country-mapping;
      rr:joinCondition [
        rr:child "intendedAudience.countries[0]";
        rr:parent "code";
      ];
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dct:spatial;
    rr:objectMap [
      rr:parentTriplesMap ex:country-mapping;
      rr:joinCondition [
        rr:child "intendedAudience.countries[1]";
        rr:parent "code";
      ];
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate dct:spatial;
    rr:objectMap [
      rr:parentTriplesMap ex:country-mapping;
      rr:joinCondition [
        rr:child "intendedAudience.countries[2]";
        rr:parent "code";
      ];
    ]
  ];








  rr:predicateObjectMap [
    rr:predicate adms:includedAsset;
    rr:objectMap [
      rml:reference "dependsOn.open[*].name"
    ]
  ];
  rr:predicateObjectMap [
    rr:predicate adms:status;
    rr:objectMap [
      rr:parentTriplesMap ex:status-mapping;
      rr:joinCondition [
        rr:child "developmentStatus";
        rr:parent "developmentStatus";
      ];
    ]
  ].
